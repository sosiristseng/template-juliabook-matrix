name: CI with dynamic parallel matrix

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  ALLOWERRORS: 'false'
  NBCACHE: ".cache"
  UV_SYSTEM_PYTHON: 1

jobs:
  setup:
    permissions:
      packages: write
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      hash: ${{ steps.img.outputs.hash }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v5
      id: setup-python
      with:
        python-version: '3.x'
        check-latest: true
    - name: Login to ghcr.io
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner	}}
        password: ${{ github.token }}
    - name: Get docker image hash
      id: img
      run: echo "hash=${{ hashFiles('requirements.txt', 'Project.toml', 'Manifest.toml', 'src/**', '**/env.Dockerfile') }}" >> "$GITHUB_OUTPUT"
    - name: Build Docker container
      env:
        IMG: ghcr.io/${{ github.repository }}:${{ steps.img.outputs.hash }}
      run: |
        docker build -f .github/env.Dockerfile -t ${IMG} --cache-from=type=registry,ref=${IMG} --cache-to=type=inline .
        docker push ${IMG}
    - name: List notebooks as a JSON array
      id: set-matrix
      run: echo "matrix=$(python -c 'import glob, json; print(json.dumps(glob.glob("**/*.ipynb", root_dir="docs", recursive=True) + glob.glob("**/*.jl", root_dir="docs", recursive=True)))')" >> "$GITHUB_OUTPUT"

  execute:
    needs: setup
    strategy:
      max-parallel: 10
      fail-fast: false
      matrix:
        notebook: ${{ fromJSON(needs.setup.outputs.matrix) }}
    runs-on: ubuntu-latest
    env:
      NB: docs/${{ matrix.notebook }}
      IMG: ghcr.io/${{ github.repository }}:${{ needs.setup.outputs.hash }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache notebook
        uses: actions/cache@v4
        id: nb-cache
        with:
          path: ${{ env.NBCACHE }}
          key: notebook-${{ needs.setup.outputs.hash }}-${{ hashFiles(env.NB) }}
      - name: Pull docker image
        if: ${{ steps.nb-cache.outputs.cache-hit != 'true' }}
        run: |
          docker pull ${{ env.IMG }}
          docker images ${{ env.IMG }}
      - name: Execute notebook
        if: ${{ steps.nb-cache.outputs.cache-hit != 'true' }}
        run: >
          docker run -w /tmp -v ${{ github.workspace }}:/tmp
          -e NB=${{ env.NB }}
          -e NBCACHE=${{ env.NBCACHE }}
          -e WORKSPACE=${{ github.workspace }}
          -e ALLOWERRORS=${{ env.ALLOWERRORS }}
          ${{ env.IMG }}
          julia --project=@. .github/ci.jl
      - name: Claim output notebook
        if: ${{ steps.nb-cache.outputs.cache-hit != 'true' }}
        run: sudo chown -R $USER ${{ env.NBCACHE }}
      - name: Convert artifact Name
        id: art
        run: echo "name=$(echo ${{ env.NB }} | sed 's/\//-/g')" >> "$GITHUB_OUTPUT"
      - name: Upload Notebook
        uses: actions/upload-artifact@v4
        with:
          name: notebook-${{ steps.art.outputs.name }}-${{ needs.setup.outputs.hash }}-${{ hashFiles(env.NB) }}
          path: ${{ env.NBCACHE }}
          include-hidden-files: true
          retention-days: 1

  render:
    needs: execute
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download notebooks
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.NBCACHE }}/
          pattern: notebook-*
          merge-multiple: true
      - name: Copy back built notebooks
        run: cp --verbose -rf ${{ env.NBCACHE }}/docs/* docs/
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          check-latest: true
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
      - name: Install Python dependencies
        run: uv pip install jupyter-book
      - name: Build website
        run: jupyter-book build docs/
      - name: Upload pages artifact
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/_build/html/

  # CI conclusion for GitHub status check
  # Adaped from https://brunoscheufler.com/blog/2022-04-09-the-required-github-status-check-that-wasnt
  CI:
    needs: render
    if: always()
    runs-on: ubuntu-latest
    steps:
      - run: |
          if [[ ${{ needs.render.result }} == "success" ]]; then
            echo "Tests passed"
            exit 0
          else
            echo "Tests failed"
            exit 1
          fi

  # Notebook branch
  notebook:
    name: Deploy (empty) notebook branch
    needs: render
    if: ${{ github.ref == 'refs/heads/main' }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Setup Julia
      uses: julia-actions/setup-julia@v2
    - name: Convert literate files to Jupyter notebooks
      shell: julia --color=yes {0}
      working-directory: docs
      run: |
        import Pkg
        Pkg.add("Literate")
        using Literate
        for (root, dirs, files) in walkdir(pwd())
          for file in files
            if endswith(file, ".jl")
              nb = joinpath(root, file)
              Literate.notebook(nb, dirname(nb); mdstrings=true, execute=false)
            end
          end
        end
    - name: Deploy pages
      uses: JamesIves/github-pages-deploy-action@v4
      if: ${{ github.ref == 'refs/heads/main' }}
      with:
        folder: .
        branch: ipynb
        commit-message: ${{ github.event.head_commit.message }}

  # GitHub pages
  deploy:
    name: Deploy to GitHub pages
    needs: render
    if: ${{ github.ref == 'refs/heads/main' }}
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write    # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
      actions: read   # to download an artifact uploaded by `actions/upload-pages-artifact@v3`
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
